import { QsoEntry } from '../types/qso';

interface AdifRecord {
  [key: string]: string;
}

export function parseAdif(content: string): AdifRecord[] {
  const records: AdifRecord[] = [];
  const headerEnd = content.toUpperCase().indexOf('<EOH>');

  if (headerEnd === -1) return records;

  const body = content.substring(headerEnd + 5);
  const regex = /<([^:>]+)(?::(\d+)(?::([^>]+))?)?>([^<]*)/gi;
  let currentRecord: AdifRecord = {};
  let match;

  while ((match = regex.exec(body)) !== null) {
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    const [_, name, length, type, value] = match;
    const fieldName = name.toLowerCase();

    if (fieldName === 'eor') {
      if (Object.keys(currentRecord).length > 0) {
        records.push(currentRecord);
        currentRecord = {};
      }
    } else {
      currentRecord[fieldName] = value.trim();
    }
  }

  // Add the last record if it doesn't end with EOR
  if (Object.keys(currentRecord).length > 0) {
    records.push(currentRecord);
  }

  return records;
}

export function parseAdifString(adifString: string): AdifRecord {
  const fields: AdifRecord = {};

  // ADIF field regex: <FIELD_NAME:LENGTH:TYPE>VALUE
  const regex = /<([^:>]+)(?::(\d+)(?::([^>]+))?)?>([^<]*)/gi;
  let match;

  while ((match = regex.exec(adifString)) !== null) {
    const [, fieldName, , , value] = match;
    const normalizedFieldName = fieldName.toLowerCase();

    // Skip EOR (End of Record) markers
    if (normalizedFieldName === 'eor') {
      continue;
    }

    fields[normalizedFieldName] = value.trim();
  }

  return fields;
}

export function formatAdif(qsos: QsoEntry[]): string {
  const header = `Generated by HamLedger\n<adif_ver:5>3.1.0\n<programid:9>HamLedger\n<EOH>\n\n`;

  return qsos.reduce((adif, qso) => {
    const fields = [
      { name: 'CALL', value: qso.callsign || '' },
      {
        name: 'QSO_DATE',
        value: new Date(qso.datetime).toISOString().split('T')[0].replace(/-/g, ''),
      },
      {
        name: 'TIME_ON',
        value: new Date(qso.datetime).toISOString().split('T')[1].substring(0, 6).replace(/:/g, ''),
      },
      { name: 'BAND', value: qso.band || '' },
      { name: 'MODE', value: qso.mode || '' },
      { name: 'FREQ', value: (qso.freqRx || 0).toString() },
      { name: 'RST_RCVD', value: qso.rstr || '' },
      { name: 'RST_SENT', value: qso.rstt || '' },
      { name: 'COMMENT', value: qso.remark || '' },
      { name: 'NOTES', value: qso.notes || '' },
      { name: 'APP_QRZLOG_LOGID', value: qso.qrzLogId || '' },
    ];

    const record = fields
      .map(f => {
        const value = f.value || '';
        return `<${f.name}:${value.length}>${value}`;
      })
      .join('');

    return adif + record + '<EOR>\n';
  }, header);
}
